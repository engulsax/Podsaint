{"version":3,"sources":["load-svg-file.js"],"names":["loadSvgFile","url","optionsOrCallback","callback","type","lastIndexOf","length","options","promise","res","rej","Promise","resolve","reject","xhr","XMLHttpRequest","onerror","onloadend","status","document","createElement","element","elementClass","class","hide","hideElement","display","body","appendChild","error","Error","open"],"mappings":";AAAA,aA+FA,SAASA,YAAaC,EAAKC,EAAmBC,GAA9C,IAAAC,SAAAH,EACE,IAAIG,GAAJ,WAAWA,EAGTA,MAAAA,EAAgB,WAATA,EAAoBA,EAApB,SAAoCA,EAA3CA,IAAOA,MAAPA,6CAAAA,EAAAA,MAMEH,EAAII,YAAY,UAAYJ,EAAIK,OAAS,IAD7CL,GAAA,QAGC,IAAAM,EAAAL,GAAA,GAEDE,SAAcF,EAEdE,GAAA,WAAcF,EAGZK,EAAUL,EADRA,aAAAA,IACFK,EAAUL,GADZC,EAEWC,GAGV,IAAAI,OAAAA,EAGGC,OAAAA,EADAD,OAAAA,EAEAE,UAGFF,EAAU,IAAIG,QAAQ,SAACC,EAASC,GAD9BF,EAAAA,EACFH,EAAAA,KAID,IAAAM,EAAA,IAAAC,eA2CD,OAzCAD,EAAMA,UAGJA,EAAIE,QAAU,WADZC,GACED,MADFC,EAAAA,OACF,CACMH,IAAII,EAAWC,SAAKC,cAAA,OACtBC,EAAMA,UAAUF,EAASC,SAGzB,IAAME,EAAwC,iBAAlBf,EAAQgB,MAAqBhB,EAAQgB,MAAQ,GAE/C,EAAtBD,EAAahB,SAAbgB,EAAAA,UAAAA,IAIwC,kBAAjBf,EAAQiB,MAAqBjB,EAAQiB,QAE5DC,EAAAA,MAAaC,QAAA,QAIjBP,SAASQ,KAAKC,YAAYP,GAEtBlB,EAAAA,IACFA,GADFM,QAIC,CAtBH,IAuBOoB,EAAA,IAAAC,MAAA,0BAAA7B,EAAA,MAGDE,EAAAA,EAAJ0B,GACWA,GADXnB,EAEOmB,KAMbf,EAAIiB,KAAK,MAAO9B,GAAK,GAArBa,EAAIiB,KAAK,MAGFvB,GAAW","file":"../src/load-svg-file.min.js","sourcesContent":["'use strict'\n\n/**\n * The options of the SVG content loading function.\n *\n * @typedef {Object} optionsType\n *\n * @property {string}  [class='']  - The class of the element, in which the content of the SVG file will be loaded.\n * @property {boolean} [hide=true] - Hide the element to prevent showing the content of the loaded SVG file.\n */\n\n/**\n * The SVG content loading callback.\n *\n * @callback callbackType\n *\n * @param {Error} error - The error, that caused the failure.\n */\n\n/**\n * Loads an SVG file using XHR and embeds its content into the DOM.\n *\n * @function loadSvgFile\n *\n * @param {string}                   url                 - The URL of the SVG file to load.\n *                                                         The .svg extension can be omitted.\n * @param {optionsType|callbackType} [optionsOrCallback] - The options of the SVG file loader or the callback.\n * @param {callbackType}             [callback]          - The result callback\n *\n * @returns {Promise|null} Promise, where available, otherwise null.\n *\n * @example\n * // Loading an SVG file.\n * loadSvgFile('images/icons.svg')\n *\n * @example\n * // Loading an SVG file with options.\n * loadSvgFile('images/icons.svg', {\n *  class: 'custom-class', // custom class on the container element\n *  hide: false            // don't hide the container element\n * })\n *\n * @example\n * // Loading an SVG file with callback.\n * loadSvgFile('images/icons.svg', function (error) {\n *  if (error) {\n *    throw error\n *  }\n *  console.log('SVG Loaded successfully')\n * })\n *\n * @example\n * // Loading an SVG file with options and callback.\n * loadSvgFile(\n *   'images/icons.svg',\n *   {\n *     class: 'custom-class', // custom class on the container element\n *     hide: false            // don't hide the container element\n *   },\n *   function (error) {\n *     if (error) {\n *       throw error\n *     }\n *     console.log('SVG Loaded successfully')\n *   }\n * )\n *\n * @example\n * // Loading an SVG file using Promise - ES2015.\n * loadSvgFile('images/icons.svg')\n *   .then(() => console.log('SVG Loaded successfully'))\n *   .catch(error => console.log(error))\n *\n * @example\n * // Loading an SVG file using async/await - ES2017.\n * await loadSvgFile('images/icons.svg')\n *\n * @example\n * // Loading an SVG file, omitting the extension.\n * loadSvgFile('images/icons')\n *\n * @example\n * // Using in Node.js (CommonJS).\n * const loadSvgFile = require('load-svg-file')\n *\n * @example\n * // Using in ES6.\n * import loadSvgFile from 'load-svg-file'\n *\n * @example\n * // Using with RequireJS (AMD).\n * require(['loadSvgFile'], function (loadSvgFile) {\n *   console.log('loadSvgFile ready')\n * })\n */\nfunction loadSvgFile (url, optionsOrCallback, callback) { // eslint-disable-line no-unused-vars\n  let type = typeof url\n\n  if (!url || type !== 'string') {\n    type = type !== 'string' ? type : `empty ${type}`\n\n    throw new Error(`The url must be a non-empty string, got: \"${type}\".`)\n  }\n\n  // check if the url has the .svg extension, otherwise append to it automatically\n  if (url.lastIndexOf('.svg') !== url.length - 4) {\n    url += '.svg'\n  }\n\n  let options = optionsOrCallback || {}\n\n  type = typeof optionsOrCallback\n\n  if (optionsOrCallback && type === 'object') {\n    options = optionsOrCallback\n  } else if (type === 'function') {\n    options = {}\n    callback = optionsOrCallback\n  }\n\n  let promise\n  let res\n  let rej\n\n  if (Promise) {\n    promise = new Promise((resolve, reject) => {\n      res = resolve\n      rej = reject\n    })\n  }\n\n  const xhr = new XMLHttpRequest()\n\n  xhr.onloadend =\n    xhr.onerror = () => {\n      if (xhr.status === 200) {\n        const element = document.createElement('div')\n        element.innerHTML = xhr.response\n\n        const elementClass = typeof options.class === 'string' ? options.class : ''\n\n        if (elementClass.length > 0) {\n          element.className = elementClass\n        }\n\n        const hideElement = typeof options.hide === 'boolean' ? options.hide : true\n\n        if (hideElement) {\n          element.style.display = 'none'\n        }\n\n        document.body.appendChild(element)\n\n        if (callback) {\n          callback()\n        } else if (promise) {\n          res()\n        }\n      } else {\n        const error = new Error(`Cannot load SVG file: \"${url}\".`)\n\n        if (callback) {\n          callback(error)\n        } else if (promise) {\n          rej(error)\n        }\n      }\n    }\n\n  xhr.open('get', url, true)\n  xhr.send(null)\n\n  return promise || null\n}\n"]}